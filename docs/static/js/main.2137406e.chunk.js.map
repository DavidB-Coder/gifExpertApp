{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","ps","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,SACXP,GAAa,SAAAQ,GAAE,OAAKN,GAAL,mBAAmBM,OAClCL,EAAc,MAOd,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAAU,SAACN,GAAOF,EAAcE,EAAEO,OAAOF,QACzCG,YAAa,wC,+BCvBpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE6CC,UAAUH,GAFvD,sDAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,2CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIvB,CAACpB,IAIIqB,EDlBiBK,CAAc1B,GAA/BO,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QAEb,OACI,qCACMA,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,6BAAKhB,IACL,qBAAKgB,UAAU,YAAf,SACKT,EAAKE,KAAI,SAACC,GACP,OACI,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEatBgB,EAzBM,WAEjB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmBC,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAa5C,YAAa4C,IAC1B,uBACA,6BAEQD,EAAWnB,KAAI,SAACT,GACZ,OACI,cAAC,EAAD,CACIA,SAAUA,GACLA,Y,MCdrC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2137406e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategory}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim()) {\n            setCategory( ps => [inputValue,...ps] );        \n            setInputValue('');\n        }\n    }\n\n\n    return (\n        <>\n            <form onSubmit={ handleSubmit }>\n                <input\n                    type=\"text\"\n                    value={ inputValue }                \n                    onChange={(e) => {setInputValue(e.target.value)}}\n                    placeholder={'Ingresa una nueva categorÃ­a'}\n                />\n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory : PropTypes.func.isRequired\n};\n","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category)}&api_key=SOkCLvqd4BKDSOM3mIyUF95Q8AkK0NLP`;\n    const response = await fetch( url );\n    const {data} = await response.json();\n\n    const gifs = data.map( img => {\n        return({\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        })\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__bounceIn\">\n            <img src={ url } alt={ title } />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../Hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n\n    const {data, loading} = useFetchGifs( category );\n    \n    return (\n        <>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n            <h3>{category}</h3>                        \n            <div className=\"card-grid\">\n                {data.map((img) => {\n                    return(\n                        <GifGridItem \n                            key={img.id}                         \n                            {...img}\n                        />\n                    )\n                })}\n            </div>            \n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        \n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });                \n            });\n\n    },[category]);\n\n    \n\n    return state; //{data[], loading}\n\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['perfect loops']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategory={setCategories}/>\n            <hr/>            \n            <ul>\n                {\n                    categories.map((category) => {\n                        return (\n                            <GifGrid \n                                category={category}\n                                key={category}\n                            />\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(  \n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}